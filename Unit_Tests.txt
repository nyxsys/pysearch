Unit Test cases

all cases assume that the other input in each case is correct.
these are formatted in terms of test -- expected behavior of program as written

standard cases
simple regex (i.e. wildcard character .) -- operates as normal, returns count
simple standard keyword (i.e. 'hello world') -- operates as normal
folder with no blank files -- operates as normal

input formatting tests
blank keyword -- outputs request for keyword
blank folder -- uses current folder
bad folder name (nonexistent) -- outputs error requesting an existing folder
bad folder name (improperly formatted, slash at start) -- outputs error requesting an existing folder 

correct but corner cases
keyword with quotes inside it -- operates as normal, regex is parsed normally
keyword with apostrophe inside it -- operates as normal, regex is parsed normally
keyword with escape character (backslash) inside it -- operates as normal, regex is parsed normally
empty folder -- operates as normal returns 0 count for subdirectory
folder with nontext files (i.e. binary) -- operates as normal, ignoring nontext files
folder without instance of keyword -- operates as normal, returns all 0 counts

scale tests
Huge (10000+) line files in folder - operates in reasonable execution time, graph disabled
Huge (10000+) number of files in folder - operates in reasonable execution time, graph disabled
Instance of each of the above tests with the following:
keyword at start of each file
keyword at end of each file
no instance of keyword in file
many instances of keyword in file

Huge Regex statement as keyword
